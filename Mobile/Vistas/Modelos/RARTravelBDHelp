package amsi.dei.estg.ipleiria.rartravel.vistas.modelos;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import java.util.ArrayList;

public class RARTravelBDHelp extends SQLiteOpenHelper {

    private static final String DB_NOME = "rartravel";
    private static final int VERSAO = 1;


    private static final String TABELA_AIRPORTS = "airports";
    private static final String ID_AIRPORT = "id";
    private static final String NAME_AIRPORT = "name";
    private static final String COUNTRY_AIRPORT = "country";
    private static final String CITY_AIRPORT = "city";

    private static final String TABELA_HOTELS = "hotels";
    private static final String ID_HOTEL = "id";
    private static final String NAME_HOTEL = "name";
    private static final String ADRESS_HOTEL = "adress";
    private static final String CITY_HOTEL = "city";
    private static final String COUNTRY_HOTEL = "country";
    private static final String DESCRIPTION_HOTEL = "description";
    private static final String NIGHTPRICE_HOTEL = "nightprice";
    private static final String RATING_HOTEL = "rating";

    private static final String TABELA_PACKAGES = "packages";
    private static final String ID_PACKAGE = "id";
    private static final String IMAGE_PACKAGE = "image";
    private static final String TITLE_PACKAGE = "title";
    private static final String DESCRIPTION_PACKAGE = "description";
    private static final String PRICE_PACKAGE = "price";
    private static final String RATING_PACKAGE = "rating";
    private static final String FLIGHTSTART_PACKAGE = "flightstart";
    private static final String FLIGHTEND_PACKAGE = "flightend";
    private static final String FLIGHTBACKSTART_PACKAGE = "flightbackstart";
    private static final String FLIGHTBACKEND_PACKAGE = "flightbackend";
    private static final String ID_HOTEL_PACKAGE = "id_hotel";
    private static final String ID_AIRPORTSTART_PACKAGE = "id_airportstart";
    private static final String ID_AIRPORTEND_PACKAGE = "id_airportend";

    private static final String TABELA_ACTIVITIES_PACKAGES = "activitiespackages";
    private static final String ID_ACTIVITIES_PACKAGES = "id";
    private static final String ACTIVITIES_PACKAGES_NAME = "name";
    private static final String ID_PACKAGE_ACTIVITIES_PACKAGES = "idPackage";
    private static final String RESPONSIBLE_ACTIVITIES_PACKAGES = "responsible";
    private static final String TIMESTART_ACTIVITIES_PACKAGES = "timestart";
    private static final String DURATION_ACTIVITIES_PACKAGES = "duration";

    private static final String TABELA_PACKAGE_IMAGES = "package_images";
    private static final String ID_IMAGE_PACKAGE_IMAGES = "id_image";
    private static final String NAME_PACKAGE_IMAGES = "name";
    private static final String IMAGE_PACKAGE_IMAGES = "image";
    private static final String PACKAGE_ID_PACKAGE_IMAGES = "package_id";

    private static final String TABELA_USERS_INFO = "usersinfo";
    private static final String USERID_USERS_INFO = "userid";
    private static final String NIF_USERS_INFO = "nif";
    private static final String NAME_USERS_INFO = "name";
    private static final String ADRESS_USERS_INFO = "adress";
    private static final String PHONE_USERS_INFO = "phone";
    private static final String BIRTHDATE_USERS_INFO = "birthdate";
    private static final String POINTS_USERS_INFO = "points";

    private static final String TABELA_USERS_PACKAGES = "userspackages";
    private static final String ID_USERS_PACKAGES = "id";
    private static final String ID_USER_USERS_PACKAGES = "id_user";
    private static final String ID_PACKAGE_USERS_PACKAGES = "id_package";
    private static final String PURCHSEDATE_USERS_PACKAGES = "purchasedate";
    private static final String REFERENCIA_USERS_PACKAGES = "referencia";
    private static final String PRICE_USERS_PACKAGES = "price";
    private static final String ENTITY_USERS_PACKAGES = "entity";
    private static final String ESTADO_USERS_PACKAGES = "estado";
    private static final String USEDPOINTS_USERS_PACKAGES = "usedpoints";
    private static final String NRPEOPLE_USERS_PACKAGES = "nrpeople";

    private SQLiteDatabase bd;

    public RARTravelBDHelp(Context context) {
        super(context, DB_NOME, null, VERSAO);
        bd = getWritableDatabase();
    }


    @Override
    public void onCreate(SQLiteDatabase db) {

        String SQL2 = "CREATE TABLE " + TABELA_AIRPORTS + "(" +
                ID_AIRPORT + " INTEGER PRIMARY KEY, " +
                NAME_AIRPORT + " TEXT NOT NULL, " +
                COUNTRY_AIRPORT + " TEXT NOT NULL, " +
                CITY_AIRPORT + " TEXT NOT NULL)";
        db.execSQL(SQL2);

        String SQL3 = "CREATE TABLE " + TABELA_HOTELS + "(" +
                ID_HOTEL + " INTEGER PRIMARY KEY, " +
                NAME_HOTEL + " TEXT NOT NULL, " +
                ADRESS_HOTEL + " TEXT NOT NULL, " +
                CITY_HOTEL + " TEXT NOT NULL, " +
                COUNTRY_HOTEL + " TEXT NOT NULL, " +
                DESCRIPTION_HOTEL + " TEXT NOT NULL, " +
                NIGHTPRICE_HOTEL + " INT NOT NULL, " +
                RATING_HOTEL + " INT NOT NULL)";
        db.execSQL(SQL3);

        String SQL4 = "CREATE TABLE " + TABELA_PACKAGES + "(" +
                ID_PACKAGE + " INTEGER PRIMARY KEY, " +
                IMAGE_PACKAGE + " TEXT NOT NULL, " +
                TITLE_PACKAGE + " TEXT NOT NULL, " +
                DESCRIPTION_PACKAGE + " TEXT NOT NULL, " +
                PRICE_PACKAGE + " INT NOT NULL, " +
                RATING_PACKAGE + " INT NOT NULL, " +
                FLIGHTSTART_PACKAGE + " TEXT NOT NULL, " +
                FLIGHTEND_PACKAGE + " INT NOT NULL, " +
                FLIGHTBACKSTART_PACKAGE + " INT NOT NULL, " +
                FLIGHTBACKEND_PACKAGE + " INT NOT NULL, " +
                ID_HOTEL_PACKAGE + " INTEGER NOT NULL, " +
                ID_AIRPORTSTART_PACKAGE + " INTEGER NOT NULL, " +
                ID_AIRPORTEND_PACKAGE + " INTEGER NOT NULL)";
                /*" FOREIGN KEY (" + ID_HOTEL_PACKAGE + ") REFERENCES " + TABELA_HOTELS + "(" + ID_HOTEL + "), " +
                " FOREIGN KEY (" + ID_AIRPORTSTART_PACKAGE + ") REFERENCES " + TABELA_AIRPORTS + "(" + ID_AIRPORT + "), " +
                " FOREIGN KEY (" + ID_AIRPORTEND_PACKAGE + ") REFERENCES " + TABELA_AIRPORTS + "(" + ID_AIRPORT + "))";*/
        db.execSQL(SQL4);

        String SQL5 = "CREATE TABLE " + TABELA_ACTIVITIES_PACKAGES + "(" +
                ID_ACTIVITIES_PACKAGES + " INTEGER PRIMARY KEY, " +
                ACTIVITIES_PACKAGES_NAME + " TEXT NOT NULL, " +
                ID_PACKAGE_ACTIVITIES_PACKAGES + " INTEGER NOT NULL, " +
                RESPONSIBLE_ACTIVITIES_PACKAGES + " TEXT NOT NULL, " +
                TIMESTART_ACTIVITIES_PACKAGES + " TEXT NOT NULL, " +
                DURATION_ACTIVITIES_PACKAGES + " INT NOT NULL)";
                /*" FOREIGN KEY (" + ID_ACTIVITY_ACTIVITIES_PACKAGES + ") REFERENCES " + TABELA_ACTIVITIES + "(" + ID_ACTIVITIE + "), " +
                " FOREIGN KEY (" + ID_PACKAGE_ACTIVITIES_PACKAGES + ") REFERENCES " + TABELA_PACKAGES + "(" + ID_PACKAGE + ")) ";*/
        db.execSQL(SQL5);

        String SQL6 = "CREATE TABLE " + TABELA_PACKAGE_IMAGES + "(" +
                ID_IMAGE_PACKAGE_IMAGES + " INTEGER PRIMARY KEY, " +
                NAME_PACKAGE_IMAGES + " TEXT NOT NULL, " +
                IMAGE_PACKAGE_IMAGES + " TEXT NOT NULL, " +
                PACKAGE_ID_PACKAGE_IMAGES + " INTEGER NOT NULL)";
                /*" FOREIGN KEY (" + PACKAGE_ID_PACKAGE_IMAGES + ") REFERENCES " + TABELA_PACKAGES + "(" + ID_PACKAGE + "))";*/
        db.execSQL(SQL6);

        String SQL7 = "CREATE TABLE " + TABELA_USERS_INFO + "(" +
                USERID_USERS_INFO + " INTEGER PRIMARY KEY, " +
                NIF_USERS_INFO + " INT, " +
                NAME_USERS_INFO + " TEXT, " +
                ADRESS_USERS_INFO + " TEXT, " +
                PHONE_USERS_INFO + " INT, " +
                BIRTHDATE_USERS_INFO + " TEXT, " +
                POINTS_USERS_INFO + " INT ) ";
        db.execSQL(SQL7);

        String SQL8 = "CREATE TABLE " + TABELA_USERS_PACKAGES + "(" +
                ID_USERS_PACKAGES + " INTEGER PRIMARY KEY, " +
                PURCHSEDATE_USERS_PACKAGES + " TEXT NOT NULL, " +
                REFERENCIA_USERS_PACKAGES + " INT NOT NULL, " +
                PRICE_USERS_PACKAGES + " INT NOT NULL, " +
                ENTITY_USERS_PACKAGES + " INT NOT NULL, " +
                ESTADO_USERS_PACKAGES + " TEXT NOT NULL, " +
                USEDPOINTS_USERS_PACKAGES + " INT NOT NULL, " +
                NRPEOPLE_USERS_PACKAGES + " INT NOT NULL, " +
                ID_USER_USERS_PACKAGES + " INTEGER NOT NULL, " +
                ID_PACKAGE_USERS_PACKAGES + " INTEGER NOT NULL)";
                /*" FOREIGN KEY (" + ID_USER_USERS_PACKAGES + ") REFERENCES " + TABELA_ACTIVITIES + "(" + ID_ACTIVITIE + "), " +
                " FOREIGN KEY (" + ID_PACKAGE_USERS_PACKAGES + ") REFERENCES " + TABELA_PACKAGES + "(" + ID_PACKAGE + ")) ";*/
        db.execSQL(SQL8);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

        String SQL1 = "DROP TABLE IF EXISTS " + TABELA_USERS_PACKAGES;
        db.execSQL(SQL1);

        String SQL2 = "DROP TABLE IF EXISTS " + TABELA_PACKAGES;
        db.execSQL(SQL2);

        String SQL3 = "DROP TABLE IF EXISTS " + TABELA_USERS_INFO;
        db.execSQL(SQL3);

        String SQL4 = "DROP TABLE IF EXISTS " + TABELA_AIRPORTS;
        db.execSQL(SQL4);

        String SQL5 = "DROP TABLE IF EXISTS " + TABELA_PACKAGE_IMAGES;
        db.execSQL(SQL5);

        String SQL6 = "DROP TABLE IF EXISTS " + TABELA_HOTELS;
        db.execSQL(SQL6);

        String SQL7 = "DROP TABLE IF EXISTS " + TABELA_ACTIVITIES_PACKAGES;
        db.execSQL(SQL7);

        this.onCreate(db);
    }
    //Métodos CRUD
    //Gets da base de dados
    public ArrayList<Packages> getListaPacotesDB(){
        ArrayList<Packages> lista = new ArrayList<>();
        Cursor cursor = bd.query(TABELA_PACKAGES, new String[]{ID_PACKAGE, IMAGE_PACKAGE, TITLE_PACKAGE, DESCRIPTION_PACKAGE, PRICE_PACKAGE,
                RATING_PACKAGE, FLIGHTSTART_PACKAGE, FLIGHTEND_PACKAGE, FLIGHTBACKSTART_PACKAGE, FLIGHTBACKEND_PACKAGE,
                ID_HOTEL_PACKAGE, ID_AIRPORTSTART_PACKAGE, ID_AIRPORTEND_PACKAGE},
                null, null, null, null, null, null);

        if(cursor.moveToFirst()){
            do{
                Packages aux = new Packages(cursor.getInt(0),//id
                        cursor.getString(1),//image
                        cursor.getString(2),//title
                        cursor.getString(3),//desc
                        cursor.getInt(4),//price
                        cursor.getInt(5),//rating
                        cursor.getString(6),//flightstart
                        cursor.getString(7),//end
                        cursor.getString(8),//backs
                        cursor.getString(9),//backend
                        cursor.getInt(10),//id
                        cursor.getInt(11),//id
                        cursor.getInt(12));//id
                lista.add(aux);
            }while(cursor.moveToNext());
        }
        return lista;
    }

    public ArrayList<Hotels> getListaHoteisBD(){
        ArrayList<Hotels> lista = new ArrayList<>();
        Cursor cursor = bd.query(TABELA_HOTELS, new String[]{ID_HOTEL, NAME_HOTEL, ADRESS_HOTEL, CITY_HOTEL, COUNTRY_HOTEL,
        DESCRIPTION_HOTEL, NIGHTPRICE_HOTEL, RATING_HOTEL},
                null, null, null, null, null, null);

        if(cursor.moveToFirst()){
            do{
                Hotels aux = new Hotels(cursor.getInt(0),
                        cursor.getString(1),
                        cursor.getString(2),
                        cursor.getString(3),
                        cursor.getString(4),
                        cursor.getString(5),
                        cursor.getInt(6),
                        cursor.getInt(7));
                lista.add(aux);
            }while(cursor.moveToNext());
        }
        return  lista;
    }

    public ArrayList<Airports> getListaAeroportosDB(){
        ArrayList<Airports> lista = new ArrayList<>();
        Cursor cursor = bd.query(TABELA_AIRPORTS, new String[]{ID_AIRPORT, NAME_AIRPORT, COUNTRY_AIRPORT, CITY_AIRPORT},
                null, null, null, null, null, null);

        if(cursor.moveToFirst()){
            do{
                Airports aux = new Airports(cursor.getInt(0),
                        cursor.getString(1),
                        cursor.getString(2),
                        cursor.getString(3));
                lista.add(aux);
            }while(cursor.moveToNext());
        }
        return lista;
    }


    public ArrayList<Activities_packages> getListaActivitiesPackagesDB(){
        ArrayList<Activities_packages> lista = new ArrayList<>();
        Cursor cursor = bd.query(TABELA_ACTIVITIES_PACKAGES, new String[]{ID_ACTIVITIES_PACKAGES, ACTIVITIES_PACKAGES_NAME, ID_PACKAGE_ACTIVITIES_PACKAGES,
                        RESPONSIBLE_ACTIVITIES_PACKAGES , TIMESTART_ACTIVITIES_PACKAGES, DURATION_ACTIVITIES_PACKAGES},
                null, null, null, null, null, null);

        if(cursor.moveToFirst()){
            do{
                Activities_packages aux = new Activities_packages(cursor.getInt(0),
                        cursor.getString(1),
                        cursor.getInt(2),
                        cursor.getString(3),
                        cursor.getString(4),
                        cursor.getInt(5));
                lista.add(aux);
            }while(cursor.moveToNext());
        }
        return lista;
    }


    public ArrayList<Users_packages> getListaHistoricoDB() {
        ArrayList<Users_packages> lista = new ArrayList<>();
        Cursor cursor = bd.query(TABELA_USERS_PACKAGES, new String[]{ID_USERS_PACKAGES, ID_USER_USERS_PACKAGES, ID_PACKAGE_USERS_PACKAGES,
                        PURCHSEDATE_USERS_PACKAGES, REFERENCIA_USERS_PACKAGES, PRICE_USERS_PACKAGES, ENTITY_USERS_PACKAGES,
                        ESTADO_USERS_PACKAGES, USEDPOINTS_USERS_PACKAGES, NRPEOPLE_USERS_PACKAGES},
                null, null, null, null, null, null);

        if(cursor.moveToFirst()){
            do{
                Users_packages aux = new Users_packages(cursor.getInt(0),
                        cursor.getInt(1),
                        cursor.getInt(2),
                        cursor.getString(3),
                        cursor.getInt(4),
                        cursor.getInt(5),
                        cursor.getInt(6),
                        cursor.getString(7),
                        cursor.getInt(8),
                        cursor.getInt(9));
                lista.add(aux);
            }while(cursor.moveToNext());
        }
        return lista;
    }


    public ArrayList<Users_info> getPerfilDB() {
        ArrayList<Users_info> lista = new ArrayList<>();
        Cursor cursor = bd.query(TABELA_USERS_INFO, new String[]{USERID_USERS_INFO, NIF_USERS_INFO, NAME_USERS_INFO,
                        ADRESS_USERS_INFO, PHONE_USERS_INFO, BIRTHDATE_USERS_INFO, POINTS_USERS_INFO},
                null, null, null, null, null, null);

        if(cursor.moveToFirst()){
            do{
                Users_info aux = new Users_info(cursor.getInt(0),
                        cursor.getInt(1),
                        cursor.getString(2),
                        cursor.getString(3),
                        cursor.getInt(4),
                        cursor.getString(5),
                        cursor.getInt(6));
                lista.add(aux);
            }while(cursor.moveToNext());
        }
        return lista;
    }

    //Adds da base de dados
    public void adicionarPacotesDB(Packages packages){
        ContentValues valores = new ContentValues();

        valores.put(ID_PACKAGE, packages.getId());
        valores.put(IMAGE_PACKAGE, packages.getImage());
        valores.put(TITLE_PACKAGE, packages.getTitle());
        valores.put(DESCRIPTION_PACKAGE, packages.getDescription());
        valores.put(PRICE_PACKAGE, packages.getPrice());
        valores.put(RATING_PACKAGE, packages.getRating());
        valores.put(FLIGHTSTART_PACKAGE, packages.getFlightstart());
        valores.put(FLIGHTEND_PACKAGE, packages.getFlightstart());
        valores.put(FLIGHTBACKSTART_PACKAGE, packages.getFlightstart());
        valores.put(FLIGHTBACKEND_PACKAGE, packages.getFlightstart());
        valores.put(ID_HOTEL_PACKAGE, packages.getFlightstart());
        valores.put(ID_AIRPORTSTART_PACKAGE, packages.getFlightstart());
        valores.put(ID_AIRPORTEND_PACKAGE, packages.getFlightstart());

        bd.insert(TABELA_PACKAGES, null, valores);
    }

    public void adicionarHoteisBD(Hotels hotels){
        ContentValues valores = new ContentValues();

        valores.put(ID_HOTEL, hotels.getId());
        valores.put(NAME_HOTEL, hotels.getName());
        valores.put(ADRESS_HOTEL, hotels.getAdress());
        valores.put(CITY_HOTEL, hotels.getCity());
        valores.put(COUNTRY_HOTEL, hotels.getCountry());
        valores.put(DESCRIPTION_HOTEL, hotels.getDescription());
        valores.put(NIGHTPRICE_HOTEL, hotels.getNightprice());
        valores.put(RATING_HOTEL, hotels.getRating());

        bd.insert(TABELA_HOTELS, null, valores);
    }

    public void adicionarAeroportosBD(Airports airports){
        ContentValues valores = new ContentValues();

        valores.put(ID_AIRPORT, airports.getId());
        valores.put(NAME_AIRPORT, airports.getName());
        valores.put(COUNTRY_AIRPORT, airports.getCountry());
        valores.put(CITY_AIRPORT, airports.getCity());

        bd.insert(TABELA_AIRPORTS, null, valores);
    }

    public void adicionarActivitiesPackagesBD(Activities_packages activities_packages){
        ContentValues valores = new ContentValues();

        valores.put(ID_ACTIVITIES_PACKAGES, activities_packages.getId());
        valores.put(ACTIVITIES_PACKAGES_NAME, activities_packages.getName());
        valores.put(ID_PACKAGE_ACTIVITIES_PACKAGES, activities_packages.getId_package());
        valores.put(RESPONSIBLE_ACTIVITIES_PACKAGES, activities_packages.getResponsible());
        valores.put(TIMESTART_ACTIVITIES_PACKAGES, activities_packages.getTimestart());
        valores.put(DURATION_ACTIVITIES_PACKAGES, activities_packages.getDuration());

        bd.insert(TABELA_ACTIVITIES_PACKAGES, null, valores);
    }

    public void adicionarHistoricoDB(Users_packages users_packages){
        ContentValues valores = new ContentValues();

        valores.put(ID_USERS_PACKAGES, users_packages.getId());
        valores.put(ID_USER_USERS_PACKAGES, users_packages.getId_user());
        valores.put(ID_PACKAGE_USERS_PACKAGES, users_packages.getId_package());
        valores.put(PURCHSEDATE_USERS_PACKAGES, users_packages.getPurchasedate());
        valores.put(REFERENCIA_USERS_PACKAGES, users_packages.getReferencia());
        valores.put(PRICE_USERS_PACKAGES, users_packages.getPrice());
        valores.put(ENTITY_USERS_PACKAGES, users_packages.getEntity());
        valores.put(ESTADO_USERS_PACKAGES, users_packages.getEstado());
        valores.put(USEDPOINTS_USERS_PACKAGES, users_packages.getUsedpoints());
        valores.put(NRPEOPLE_USERS_PACKAGES, users_packages.getNrpeople());

        bd.insert(TABELA_USERS_PACKAGES, null, valores);
    }

    public void adicionarPerfilDB(Users_info users_info){
        ContentValues valores = new ContentValues();

        valores.put(USERID_USERS_INFO, users_info.getUserid());
        valores.put(NIF_USERS_INFO, users_info.getNif());
        valores.put(NAME_USERS_INFO, users_info.getName());
        valores.put(ADRESS_USERS_INFO, users_info.getAdress());
        valores.put(PHONE_USERS_INFO, users_info.getPhone());
        valores.put(BIRTHDATE_USERS_INFO, users_info.getBirthdate());
        valores.put(POINTS_USERS_INFO, users_info.getPoints());

        bd.insert(TABELA_USERS_INFO, null, valores);
    }

    //Removes da base de dados
    public boolean removerPacotesDB(long id){
        return bd.delete(TABELA_PACKAGES,  ID_PACKAGE + "= ?", new String[] {"" + id}) == 1;
    }

    public boolean removerHoteisDB(long id){
        return bd.delete(TABELA_HOTELS, ID_HOTEL + "= ?", new String[] {"" + id}) == 1;
    }

    public boolean removerAeroportosDB(long id){
        return bd.delete(TABELA_AIRPORTS, ID_AIRPORT + "= ?", new String[] {"" + id}) == 1;
    }

    public boolean removerActivitiesPackagesDB(long id){
        return bd.delete(TABELA_ACTIVITIES_PACKAGES, ID_ACTIVITIES_PACKAGES + "= ?", new String[] {"" + id}) == 1;
    }

    public boolean removerHistoricoDB(long id){
        return bd.delete(TABELA_USERS_PACKAGES, ID_USERS_PACKAGES + "= ?", new String[] {"" + id}) == 1;
    }

    public boolean removerPerfilDB(long id){
        return bd.delete(TABELA_USERS_INFO, USERID_USERS_INFO + "= ?", new String[] {"" + id}) == 1;
    }

}
